나중에 반드시 알아야 할 내용
- 데이터베이스 연동: ORM, Java의 경우 JPA(Hibernate)

**Data Type(자료형)
1.Data
=>컴퓨터의 작업에 사용되는 모든 것
=>DataType: 컴퓨터의 모든 것은 메모리에 저장한 후 사용을 해야 하는데 메모리는 2진수만 저장할 수 있고 크기가 제한적이라서 데이터를 컴퓨터의 메모리에 어떤 방식으로 저장하고 읽을 것인가 그리고 얼마만큼의 용량을 할당한 것인가 하는 것이 자료형입니다.
=>Data Structure(자료구조): 여러 개의 데이터를 저장하는 방법

2.데이터 분류
1)데이터의 변경 가능 여부에 따른 분류
=>Immutable: 변경 불가능한 데이터, 읽기 전용
Constant: 고의적으로 변경이 불가능하도록 선언 - final

Literal: Literal 도 Constant 라고 하기도 합니다. 프로그래밍 언어에서 데이터를 직접 입력하고자 할 때 사용하는 것

=>Mutable: 변경 가능한 데이터, 변수라고도 함

2)저장할 수 있는 데이터의 개수에 따른 분류
=>scala data: 반드시 1개만 저장해야 하는 데이터
자바에서는 scala type은 value type 처럼 사용

=>vector data(collection): 0개 이상 저장할 수 있는 데이터
배열: 동일한 모양의 비교 할 수 있는 데이터들의 모임, 인덱스로 구분 - 이름[번호]

클래스 & 객체: 모아서 하나를 구성하는 것, 이름으로 구분 - 큰이름.작은이름

3)타입 결정 시기에 따른 분류
=>정적 타입: 소스 코드를 작성(변수를 선언)할 때 자료형을 결정하는 것
자바는 기본적으로 정적 타입 언어


=>동적 타입: 실행 시(런 타임) 자료형을 결정하는 것
자바에서는 제너릭이 동적 타입입니다.

4)자바의 자료형
=>primitive type: 데이터 1개를 저장하는 자료형
value type 처럼 사용

boolean: true, false 저장
byte, short, char, int, long: 정수 저장
float, double: 실수 저장(정수도 저장 가능)

=>nonprimitive type: 데이터를 0개 이상 저장하는 자료형
배열 과 클래스를 이용해서 생성한 객체

3.변수(Variable)
1)변수
=>데이터를 저장하는 공간에 붙이는 이름
=>참조를 직접 이용하게되면 기억하기 어렵기 때문에 기억하기 쉬운 변수를 이용

2)변수 생성
자료형 변수이름;
자료형 변수이름 = 값; 
=>값은 리터럴이 될 수 있고 다른 데이터를 가리키고 있는 변수도 가능하고 연산식도 가능하고 리턴이 있는 메서드 호출 구문도 가능합니다.
=>값 과 변수의 자료형이 일치해야 합니다.
=>값을 먼저 저장하고 저장한 참조를 변수 이름 과 매핑을 시킵니다.
=>변수 이름만 입력하면 primitive type은 가리키고 있는 데이터가 되고 그 이외의 자료형은 참조(hash code)가 됩니다.
=>만들어진 변수에 데이터를 대입하고자 할 때는 변수이름 = 데이터 형태로 작성하면 됩니다.
=>동일한 블럭에서는 동일한 이름의 변수를 2번 생성할 수 없습니다.

3)변수 이름 규칙
=>영문 이나 한글로 시작해야 함
=>영문, 한글, 숫자, 특수문자(_, $)를 포함할 수 있음
공백은 안됨

4.Primitive Type
=>boolean, byte, short, char, int, long, float, double
1)정수
=>메모리 크기에 따라서 5가지
bit: 0 이나 1가지 모양을 표현할 수 있음

=>byte(8bit): 256 가지 모양 가능
-128 ~ 127
네트워크 프로그래밍 이나 파일 처리에서 활용

=>short(16bit - 2byte)
65536 가지 모양
-32768 ~ 32767 까지 표현 가능
예전 프로그래밍에서 색상이나 좌표를 나타날 때 주로 이용
 
=>int(32bit - 4byte)
정수 리터럴의 기준형 - 10이라고 입력하면 int 10
양수 와 음수 21억 정도 저장 가능

=>long(64bit - 8byte)
정수 리터럴을 long 형으로 만들 때는 뒤에 l, 이나 L을 붙여야 합니다.
10L - long 10

=>자신의 범위 바깥의 숫자를 대입하면 에러
=>자신의 크기보다 큰 크기의 변수를 대입하면 에러

package java0930;

public class IntegerTest {
	public static void main(String[] args) {
		//10이라는 데이터를 x가 가리키도록 설정
		int x = 10;
		System.out.println(x);

		//x가 30을 가리키도록 변경
		x = 30;
		System.out.println(x);

		//int x = 30; //두번만들어서 에러
		//System.out.println(y);
		//없어서 에러
	}

}

2)문자 - 하나의 글자
=>char(16bit - 2byte)
=>문자 리터럴은 ' ' 안에 한 글자를 기재합니다.
=>컴퓨터는 문자를 저장할 수 없기 때문에 실제로는 문자에 해당하는 코드를 저장합니다.
대문자 A는 65 이고 소문자 a 는 97 숫자 0은 48..
=>char는 출력할 때는 코드에 해당하는 문자를 출력
=>char는 정수로 취급합니다.
=>0 ~ 65535까지 입니다.
=>정수 와 연산이 가능
=>제어문자
\ 다음에 영문 소문자를 하나를 추가해서 특별한 의미를 갖는 문자로 만든것

\t: 탭 \n: 줄바꿈 \0: null

윈도우에서 \를 표현하고자 할 때는 \\ 해야 합니다.
작은 따옴표 나 큰 따옴표를 출력하고자 하는 경우 \' \" 를 해야 합니다.

3)실수
=>소수가 있는 숫자
=>float 과 double 이 존재
=>float 은 4바이트 이고 double은 8byte
=>정수보다 실수가 큰 것으로 간주
=>소수 있는 일반적인 숫자는 double - 실수 기준형
=>float을 만들 때는 뒤에 f를 붙여야 합니다.
=>float 은 일반적으로 소수 7째 자리까지 그리고 double은 소수 15째 자리까지 정밀도를 제공합니다.
=>컴퓨터는 float 보다는 double 을 선호합니다.
예전 시스템에서는 float을 사용함
=>컴퓨터는 2진수를 이용하기 때문에 표현하지 못하는 소수가 있음 - 정밀도에 한계가 있음
실수 연산을 해야 하는 경우에는 정수로 변환해서 수행한 후 결과를 다시 실수로 변경하거나 실수를 문자열로 변경해서 연산을 수행해주는 API를 이용해야 합니다.

4)숫자 자료형
byte < short < int < long < float < double
          char

5)Type Casting(형 변환)
=>데이터의 자료형을 변경하는 것
=>자동 형 변환: 자바가 자동으로 데이터의 자료형을 변경하는 것
  - 작은 크기의 데이터를 큰 크기의 데이터 공간(변수)에 저장하는 경우

    double d  =10; ---> double d = 10.0;

  - int 보다 작은 크기의 자료형을 가지고 산술 연산(+, -, *, /, %)을 수행하면 int 로 변경해서 작업을 수행합니다.

   byte b1 = 3;
   byte b2 = 6;
   int r = b1 * b2; ---> int r = (int)b1 * (int)b2;

=>강제 형 변환: 자료형을 강제로 변경하는 것
큰 자료형의 데이터를 작은 자료형으로 변경하는데 아주 특별한 경우에는 작은 자료형의 데이터를 큰 자료형으로 변경하기도 함
큰 자료형의 데이터를 작은 자료형으로 변경하면 데이터가 소멸될 수 있습니다.
실수를 정수로 변경하면 소수가 버려지고 정수를 정수로 변경할 때는 Overflow 나 Underflow 가 발생할 수 있습니다.

(변경하고자 하는 자료형) 데이터 형식으로 강제 형 변환 수행

int x = 30;
(double)x;  //30.0 이 됩니다.

6)Overflow 와 Underflow
=>데이터의 표현 범위를 넘어선 데이터를 강제로 형변환해서 대입하면 가장 큰 숫자를 넘어가면 가장 작은 숫자부터 다시 하나씩 올라갑니다.
가장 작은 숫자보다 더 작은 숫자를 강제로 변환해서 대입하면 가장 큰 숫자부터 하나씩 줄어들니다.

7)boolean
=>true 나 false 둘 중 하나를 저장하는 자료형
=>true를 참으로 하고 false 를 거짓으로 판단
=>메모리 1byte를 할당
=>숫자로 변환이 안됨
=>변수를 만들 때 앞에 b 나 is를 붙여서 boolean 임을 표시하는 것이 일반적
=>거의 모든 프로그래밍 언어에서 is로 시작하는 함수의 결과는 무조건 boolean

public class BooleanTest {

	public static void main(String[] args) {
		//boolean 변수 만들고 출력하기
		boolean isPan = true;
		System.out.println(isPan);
		
		System.out.println(
				"123".isBlank());
		System.out.println(
				"123".isEmpty());

	}

}

4.String
=>문자열 클래스
=>Primitive Type 이 아니지만 사용은 Primitive Type 처럼 합니다.
=>" "안에 문자들을 나열해서 직접 대입이 가능합니다.
=>변수 이름을 출력하면 변수에 저장된 내용이 출력됩니다.

		//문자열 저장
		String name = "박문석";
		System.out.println(name);

5.리터럴 저장
=>자바에서는 리터럴을 static 영역(한 번 만들면 절대 지워지지 않는 영역)에 저장하고 사용
=>저장된 공간에 해시코드를 확인할 때는 System.identityHashCode를 이용하면 됩니다.

6.연습문제
=>이름 과 나이 와 키를 저장하는 변수를 만들고 값을 저장한 후 출력


**Operator(연산자)
1.연산자
=>계산을 수행해주는 기호나 명령어
1)용어
=>Operator: 연산자
=>Operand: 피연산자 - 연산의 대상이 되는 데이터
10 + 5 : 10 과 5는 Operand 이고 + 는 Operator

2)연산의 분류
=>산술 연산 과 논리 연산
산술 연산은 숫자 연사
논리 연산은 참 과 거짓 연산

=>피 연산자의 개수의 따른 분류
Unary(단항): 피 연산자가 1개인 연산
Binary(이항): 피 연산자가 2개인 연산
Ternary(삼항): 피 연산자가 3개인 연산

2.최우선 연산자
1)( )
=>연산의 우선 순위를 변경할 때 사용

2)[ ]
=>배열의 크기나 인덱스를 설정할 때 사용

3.단항 연산자
1) ~(틸드)
=>1의 보수(0->1, 1->0)를 구해주는 연산자
=>숫자로 보면 양수의 1의 보수를 구하면 음수가 되고 절대값은 1증가
음수의 1의 보수를 구하면 양수가 되고 절대값은 1감소

2)!
=>boolean 데이터에 사용하는 연산자로 true -> false 로 false -> true로 만들어주는 연산자

3)부호 +, -
=>- 는 2의 보수의 의미


















